#!/usr/bin/env bash
# set -euo pipefail

######################################################################
# SCRIPT:      entrypoint.sh
# DESCRI√á√ÉO:   Ponto de entrada do container TOTVS AppServer. 
#              Gerencia extra√ß√£o de recursos, inicializa√ß√£o do AppServer 
#              e do servidor web de gerenciamento, e monitoramento de logs.
# AUTOR:       Julian de Almeida Santos
# DATA:        2025-10-19
#
######################################################################

# ---------------------------------------------------------------------

## üöÄ VARI√ÅVEIS DE CONFIGURA√á√ÉO

APPSERVER_MANAGER="/service.sh"
HTTPSERVER_MANAGER="/totvs/http/server.py"
APPSERVER_MODE="${APPSERVER_MODE:-application}"
APPSERVER_CONSOLEFILE="${APPSERVER_CONSOLEFILE:-/totvs/protheus/bin/appserver/console.log}"

EXTRACT_RESOURCES="${EXTRACT_RESOURCES:-false}"
TOTVS_DIR="/totvs"
PROTHEUS_FILE="${TOTVS_DIR}/protheus.tar.gz"
PROTHEUS_DATA_FILE="${TOTVS_DIR}/protheus_data.tar.gz"
RESOURCES_DIR="${TOTVS_DIR}/resources"

# ---------------------------------------------------------------------

## üöÄ FUN√á√ïES DE CONTROLE DO APPSERVER

  start_appserver() {
    echo "üöÄ Iniciando servi√ßo TOTVS AppServer..."
    "${APPSERVER_MANAGER}" start
  }

  stop_appserver() {
    echo "üõë Finalizando servi√ßo TOTVS AppServer..."
    "${APPSERVER_MANAGER}" stop
  }

# ---------------------------------------------------------------------

## üöÄ FUN√á√ïES DE CONTROLE DO SERVIDOR WEB

  start_webserver() {
    echo "üåê Iniciando servidor web para gerenciamento do AppServer..."
    nohup python3 "${HTTPSERVER_MANAGER}" > /dev/null 2>&1 &
    echo "‚úÖ Servidor web iniciado em segundo plano."
  }

  stop_webserver() {
    echo "üõë Finalizando servidor web..."
    pkill -f "${HTTPSERVER_MANAGER}" || echo "‚ÑπÔ∏è Nenhum processo do servidor web encontrado."
    echo "‚úÖ Servidor web finalizado."
  }

# ---------------------------------------------------------------------

## üöÄ FUN√á√ÉO PRINCIPAL DE EXECU√á√ÉO

  main() {
    echo ""
    echo "------------------------------------------------------"
    echo "üöÄ IN√çCIO DA EXECU√á√ÉO PRINCIPAL"
    echo "------------------------------------------------------"
      
    start_appserver
    start_webserver

    echo
    echo "üìú Monitorando logs em tempo real:"
    echo "-----------------------------------"
    # Cria o arquivo de log se ele n√£o existir
    touch "${APPSERVER_CONSOLEFILE}"
    # Monitora o log, mantendo o PID 1 vivo (necess√°rio para o Docker)
    tail -n 200 -f "${APPSERVER_CONSOLEFILE}"
  }

# ---------------------------------------------------------------------

## üöÄ EXTRA√á√ÉO DE RECURSOS

if [[ "$EXTRACT_RESOURCES" == "true" ]]; then

  echo ""
  echo "------------------------------------------------------"
  echo "üß© EXTRA√á√ÉO DE RECURSOS"
  echo "------------------------------------------------------"
  echo "üß© Iniciando extra√ß√£o de recursos para a aplica√ß√£o..."

  cd "$TOTVS_DIR"

  # --- Protheus (protheus.tar.gz) ---
  if [[ -f "$PROTHEUS_FILE" ]]; then
    echo "üì¶ Extraindo **protheus.tar.gz**..."
    tar --keep-old-files -xzf "$PROTHEUS_FILE" -C "$TOTVS_DIR"
    rm -f "$PROTHEUS_FILE"
  else
        echo "‚ö†Ô∏è  Arquivo **protheus.tar.gz** n√£o encontrado. Pulando extra√ß√£o."
  fi

  # --- Protheus_data (protheus_data.tar.gz) ---
  if [[ -f "$PROTHEUS_DATA_FILE" ]]; then
    echo "üì¶ Extraindo **protheus_data.tar.gz**..."
    tar --keep-old-files -xzf "$PROTHEUS_DATA_FILE" -C "$TOTVS_DIR"
    rm -f "$PROTHEUS_DATA_FILE"
  else
    echo "‚ö†Ô∏è  Arquivo **protheus_data.tar.gz** n√£o encontrado. Pulando extra√ß√£o."
  fi

  # --- appserver.ini ---
  local_ini="/totvs/protheus/bin/appserver/appserver.ini"
  if [[ ! -s "$local_ini" ]]; then
    echo "üìù Verificando e copiando **appserver.ini** padr√£o..."
    mkdir -p "$(dirname "$local_ini")"
    case "$APPSERVER_MODE" in
      application)
        echo "‚öôÔ∏è  Modo: **'$APPSERVER_MODE'** ‚Äî Aplicando configura√ß√£o padr√£o: appserver.ini"
        cp -f "$RESOURCES_DIR/appserver.ini" "$local_ini"
        ;;
      rest)
        echo "‚öôÔ∏è  Modo: **'$APPSERVER_MODE'** ‚Äî Aplicando configura√ß√£o padr√£o: appserver_rest.ini"
        cp -f "$RESOURCES_DIR/appserver_rest.ini" "$local_ini"
        ;;
      sqlite)
        echo "‚öôÔ∏è  Modo: **'$APPSERVER_MODE'** ‚Äî Aplicando configura√ß√£o padr√£o: appserver_sqlite.ini"
        cp -f "$RESOURCES_DIR/appserver_sqlite.ini" "$local_ini"
        ;;
      *)
        echo "‚ùó  Modo desconhecido: **'$APPSERVER_MODE'**. Aplicando configura√ß√£o padr√£o gen√©rica."
        cp -f "$RESOURCES_DIR/appserver.ini" "$local_ini"
        ;;
    esac
  else
    echo "‚öôÔ∏è  Modo: **'$APPSERVER_MODE'**"
    echo "üìù Utilizando **appserver.ini** pr√©-existente (volume-mounted)."
  fi

  echo "‚úÖ Recursos extra√≠dos com sucesso!"
else
  echo "‚è≠Ô∏è Extra√ß√£o de recursos desabilitada. (EXTRACT_RESOURCES=false)"
  echo
fi

# ---------------------------------------------------------------------

## üöÄ EXECU√á√ÉO FINAL

# Este bloco garante que a fun√ß√£o 'main' seja executada apenas se o script for 
# executado diretamente, e n√£o se for 'sourced'.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi