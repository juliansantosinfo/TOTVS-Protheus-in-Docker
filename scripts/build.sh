#!/bin/bash
#
# ==============================================================================
# SCRIPT: master-build.sh
# DESCRI√á√ÉO: Script mestre para automatizar o processo de build de m√∫ltiplas
#            aplica√ß√µes Docker (appserver, dbaccess, etc.) a partir da raiz do projeto.
#            Se nenhuma aplica√ß√£o for especificada, todas ser√£o constru√≠das.
# AUTOR: Julian de Almeidad Santos
# DATA: 2025-10-12
# USO: ./master-build.sh [<app1> [app2] [...]] [plain | auto | tty]
#
# Exemplo 1: ./master-build.sh # Constr√≥i TODAS as aplica√ß√µes
# Exemplo 2: ./master-build.sh appserver dbaccess
# Exemplo 3: ./master-build.sh licenseserver plain
#
# Argumentos obrigat√≥rios (se fornecidos): Nomes das aplica√ß√µes (appserver, dbaccess, licenseserver, mssql, postgres).
# Argumentos opcionais (devem vir por √∫ltimo):
#   - Modo de Progress (Argumento 1): 'plain', 'auto', ou 'tty' (Opcional, padr√£o no script filho).
# ==============================================================================

# --- Configura√ß√£o de Robustez (Boas Pr√°ticas Bash) ---
set -euo pipefail

# --- Vari√°veis de Configura√ß√£o ---
# Lista de aplica√ß√µes v√°lidas no seu projeto.
readonly VALID_APPS=("appserver" "dbaccess" "licenseserver" "mssql" "postgres")
# Armazena os nomes das aplica√ß√µes que ser√£o constru√≠das.
APPS_TO_BUILD=()
# Vari√°veis para repassar os argumentos opcionais (progress).
PROGRESS_ARG="auto"
PROMPT_ARG="auto"

# ----------------------------------------------------
#               FUN√á√ÉO DE VALIDA√á√ÉO
# ----------------------------------------------------

# Fun√ß√£o auxiliar para verificar se um item est√° na lista de aplica√ß√µes v√°lidas.
is_valid_app() {
    local app_name="$1"
    for valid_app in "${VALID_APPS[@]}"; do
        if [ "$app_name" == "$valid_app" ]; then
            return 0 # 0 √© sucesso (verdadeiro)
        fi
    done
    return 1 # 1 √© falha (falso)
}

# ----------------------------------------------------
#               PROCESSAMENTO DE ARGUMENTOS
# ----------------------------------------------------

# Itera sobre todos os argumentos passados para separar as aplica√ß√µes dos par√¢metros.
for arg in "$@"; do
    case "$arg" in
        # Captura os argumentos opcionais de modo (progress)
        "plain" | "auto" | "tty")
            PROGRESS_ARG="$arg"
            ;;
        "no-prompt" | "noprompt")
            PROMPT_ARG="$arg"
            ;;
        # Se n√£o for um argumento de modo conhecido, trata como nome de aplica√ß√£o.
        *)
            if is_valid_app "$arg"; then
                APPS_TO_BUILD+=("$arg")
            # Se o argumento n√£o for um app v√°lido nem um par√¢metro de modo, ele √© ignorado.
            else
                echo "‚ö†Ô∏è Aviso: O argumento '$arg' n√£o √© um nome de aplica√ß√£o ou par√¢metro v√°lido e ser√° ignorado." >&2
            fi
            ;;
    esac
done

# --- NOVO BLOCO DE L√ìGICA ---
# Se a lista de aplica√ß√µes para construir estiver vazia, use TODAS as aplica√ß√µes v√°lidas.
if [ ${#APPS_TO_BUILD[@]} -eq 0 ]; then
    echo "‚ÑπÔ∏è Nenhuma aplica√ß√£o especificada. Construindo TODAS as aplica√ß√µes v√°lidas."
    APPS_TO_BUILD=("${VALID_APPS[@]}")
fi

# ----------------------------------------------------
#               FLUXO PRINCIPAL: EXECU√á√ÉO DOS BUILDS
# ----------------------------------------------------

echo ""
echo "--- Etapa: Execu√ß√£o de Builds ---"

echo "=========================================================="
echo "üéØ INICIANDO BUILD MASTER: ${APPS_TO_BUILD[*]}"
echo "Par√¢metros repassados: Progress='${PROGRESS_ARG:-padr√£o do script filho}'"
echo "=========================================================="

# Vari√°vel de controle para rastrear o sucesso de todos os builds.
MASTER_SUCCESS=true

# Loop sobre a lista de aplica√ß√µes para construir.
for APP_NAME in "${APPS_TO_BUILD[@]}"; do
    
    echo ""
    echo ">>> üèóÔ∏è INICIANDO BUILD PARA APLICA√á√ÉO: $APP_NAME <<<"
    
    # Monta o caminho completo do script espec√≠fico.
    SCRIPT_PATH="./${APP_NAME}/build.sh"

    if [ ! -f "$SCRIPT_PATH" ]; then
        echo "üö® ERRO: Script espec√≠fico n√£o encontrado: $SCRIPT_PATH" >&2
        MASTER_SUCCESS=false
        continue # Pula para a pr√≥xima aplica√ß√£o no loop
    fi

    # Executa o script filho, repassando os argumentos de progress.
    echo "‚û°Ô∏è Chamando script: $SCRIPT_PATH ${PROGRESS_ARG} ${PROMPT_ARG}"
    
    # Usa 'bash' explicitamente e verifica o status de sa√≠da.
    if ! bash "$SCRIPT_PATH" "$PROGRESS_ARG" "${PROMPT_ARG}"; then
        echo "‚ùå FALHA: O script de build para '$APP_NAME' falhou." >&2
        MASTER_SUCCESS=false
    else
        echo "‚úÖ SUCESSO: Build para '$APP_NAME' conclu√≠do."
    fi

    echo ">>> FIM DO BUILD PARA $APP_NAME <<<"
    echo ""

done

# ----------------------------------------------------
#               PUSH DE IMAGENS PARA DOCKERHUB
# ----------------------------------------------------

echo ""
echo "--- Etapa: Publica√ß√£o no DockerHub ---"

# Lembrete de Login: Garante que o usu√°rio esteja autenticado.
echo "‚ö†Ô∏è Certifique-se de estar logado no Docker Hub: (docker login)"
read -p "Deseja enviar TODAS as imagens criadas para o DockerHub? (s/n) " execute_push

if [[ "$execute_push" =~ ^[Ss]$ ]]; then

    echo ">>> üîÑ INICIANDO PUSH PARA DOCKERHUB: <<<"

    # Usando a estrutura <USUARIO>/<IMAGEM>:<TAG> para cada servi√ßo.
    readonly DOCKER_TAG_APPSERVER="juliansantosinfo/totvs_appserver:12.1.2310"
    readonly DOCKER_TAG_DBACCESS="juliansantosinfo/totvs_dbaccess:23.1.1.4"
    readonly DOCKER_TAG_LICENSE="juliansantosinfo/totvs_licenseserver:3.6.1"
    readonly DOCKER_TAG_MSSQL="juliansantosinfo/totvs_mssql:12.1.2310"
    readonly DOCKER_TAG_POSTGRES="juliansantosinfo/totvs_postgres:12.1.2310"

    readonly IMAGES_TO_PUSH=(
        "$DOCKER_TAG_APPSERVER"
        "$DOCKER_TAG_DBACCESS"
        "$DOCKER_TAG_LICENSE"
        "$DOCKER_TAG_MSSQL"
        "$DOCKER_TAG_POSTGRES"
    )
    
    # Itera sobre o array de tags e envia uma por uma.
    for tag in "${IMAGES_TO_PUSH[@]}"; do
        echo "‚û°Ô∏è Enviando imagem: $tag"
        # O 'set -e' no in√≠cio do script garantir√° que ele pare se qualquer 'docker push' falhar.
        if docker push "$tag"; then
            echo "‚úÖ Push de '$tag' conclu√≠do."
        else
            echo "‚ùå Falha ao enviar '$tag'. Continuar ou abortar?" >&2
            # Se voc√™ quiser que o script pare na falha, n√£o precisa do 'if/else',
            # o 'set -e' j√° cuida disso. Mantive o 'if' para melhor feedback.
        fi
    done
    
    echo "üéâ Processo de Push finalizado."
    echo ">>> FIM DO PUSH PARA DOCKERHUB <<<"
    echo ""
else
    echo "‚è≠Ô∏è Push para DockerHub ignorado."
fi

# ----------------------------------------------------
#               FINALIZA√á√ÉO
# ----------------------------------------------------

if [ "$MASTER_SUCCESS" = true ]; then
    echo "=========================================================="
    echo "üéâ SUCESSO GERAL: Todos os builds solicitados foram conclu√≠dos!"
    echo "=========================================================="
    exit 0
else
    echo "=========================================================="
    echo "üõë FALHA GERAL: Um ou mais builds falharam. Verifique os logs acima." >&2
    echo "=========================================================="
    exit 1
fi